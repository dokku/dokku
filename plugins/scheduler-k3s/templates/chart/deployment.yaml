{{- $processName := "PROCESS_NAME" }}
{{- $config := index .Values.processes "PROCESS_NAME" }}
{{- $mappings := dict }}
{{- if eq $processName "web" }}
{{- range $pdx, $port_map := $config.web.port_maps }}
{{- $mappings := set $mappings $port_map.name "true" }}
{{- end }}
{{- end }}

{{- /* Check if any volumes have chown set */}}
{{- $has_chown := false }}
{{- if $config.volumes }}
{{- range $vol := $config.volumes }}
{{- if $vol.chown }}
{{- $has_chown = true }}
{{- end }}
{{- end }}
{{- end }}

{{- /* Set default values to avoid nil pointer errors */}}
{{- if not $.Values.deployment }}
{{- $_ := set $.Values "deployment" (dict "strategy" (dict "type" "RollingUpdate" "rollingUpdate" (dict "maxUnavailable" "25%" "maxSurge" "25%"))) }}
{{- end }}

{{- /* Define strategy type */}}
{{- $strategyType := $.Values.deployment.strategy.type | default "RollingUpdate" }}

{{- /* Define default values for maxUnavailable and maxSurge */}}
{{- $maxUnavailable := $.Values.deployment.strategy.rollingUpdate.maxUnavailable | default "25%" }}
{{- $maxSurge := $.Values.deployment.strategy.rollingUpdate.maxSurge | default "25%" }}

{{- /* Override values if volumes exist */}}
{{- if and $config.volumes (eq $strategyType "RollingUpdate") }}
{{- $maxUnavailable = "100%" }}
{{- $maxSurge = "0" }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.kubernetes.io/version: {{ $.Values.global.deployment_id | quote }}
    dokku.com/builder-type: {{ $.Values.global.image.type }}
    dokku.com/managed: "true"
    kubectl.kubernetes.io/default-container: {{ $.Values.global.app_name }}-{{ $processName }}
    {{ include "print.annotations" (dict "config" $.Values.global "key" "deployment") | indent 4 }}
    {{ include "print.annotations" (dict "config" $config "key" "deployment") | indent 4 }}
  labels:
    app.kubernetes.io/instance: {{ $.Values.global.app_name }}-{{ $processName }}
    app.kubernetes.io/name: {{ $processName }}
    app.kubernetes.io/part-of: {{ $.Values.global.app_name }}
    {{ include "print.labels" (dict "config" $.Values.global "key" "deployment") | indent 4 }}
    {{ include "print.labels" (dict "config" $config "key" "deployment") | indent 4 }}
  name: {{ $.Values.global.app_name }}-{{ $processName }}
  namespace: {{ $.Values.global.namespace }}
spec:
  replicas: {{ $config.replicas }}
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $.Values.global.app_name }}-{{ $processName }}
      app.kubernetes.io/name: {{ $processName }}
      app.kubernetes.io/part-of: {{ $.Values.global.app_name }}
      {{ include "print.labels" (dict "config" $.Values.global "key" "pod") | indent 6 }}
      {{ include "print.labels" (dict "config" $config "key" "pod") | indent 6 }}
  strategy:
    type: {{ $strategyType }}
    {{- if eq $strategyType "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ $maxUnavailable }}
      maxSurge: {{ $maxSurge }}
    {{- end }}
  template:
    metadata:
      annotations:
        app.kubernetes.io/version: {{ $.Values.global.deployment_id | quote }}
        dokku.com/builder-type: {{ $.Values.global.image.type }}
        dokku.com/managed: "true"
        kubectl.kubernetes.io/default-container: {{ $.Values.global.app_name }}-{{ $processName }}
        {{ include "print.annotations" (dict "config" $.Values.global "key" "pod") | indent 8 }}
        {{ include "print.annotations" (dict "config" $config "key" "pod") | indent 8 }}
      labels:
        app.kubernetes.io/instance: {{ $.Values.global.app_name }}-{{ $processName }}
        app.kubernetes.io/name: {{ $processName }}
        app.kubernetes.io/part-of: {{ $.Values.global.app_name }}
        {{ include "print.labels" (dict "config" $.Values.global "key" "pod") | indent 8 }}
        {{ include "print.labels" (dict "config" $config "key" "pod") | indent 8 }}
    spec:
      containers:
      - args:
        {{- range $config.args }}
        - {{ . }}
        {{- end }}
        {{- if eq $processName "web" }}
        env:
        - name: PORT
          value: "{{ $.Values.global.network.primary_port }}"
        {{- end }}
        envFrom:
        - secretRef:
            name: env-{{ $.Values.global.app_name }}.{{ $.Values.global.deployment_id }}
            optional: true
        image: {{ $.Values.global.image.name }}
        imagePullPolicy: Always
        name: {{ $.Values.global.app_name }}-{{ $processName }}
        {{- if eq $processName "web" }}
        ports:
        {{- range $pdx, $port_map := $config.web.port_maps }}
        {{- if and (eq $port_map.scheme "https") (hasKey $mappings (printf "http-80-%.0f" $port_map.container_port)) }}
        {{- continue }}
        {{- end }}
        - containerPort: {{ $port_map.container_port }}
          name: {{ $port_map.name }}
          protocol: {{ $port_map.protocol }}
        {{- end }}
        {{- end }}
        {{- if and $config.resources (or $config.resources.limits $config.resources.requests) }}
        resources:
          {{- if $config.resources.limits }}
          limits:
            {{- if $config.resources.limits.cpu }}
            cpu: {{ $config.resources.limits.cpu }}
            {{- end }}
            {{- if $config.resources.limits.memory }}
            memory: {{ $config.resources.limits.memory }}
            {{- end }}
          {{- end }}
          {{- if $config.resources.requests }}
          requests:
            {{- if $config.resources.requests.cpu }}
            cpu: {{ $config.resources.requests.cpu }}
            {{- end }}
            {{- if $config.resources.requests.memory }}
            memory: {{ $config.resources.requests.memory }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if and $config.healthchecks $config.healthchecks.startup }}
        startupProbe:
          {{ $config.healthchecks.startup | toJson | indent 10 }}
        {{- end }}
        {{- if and $config.healthchecks $config.healthchecks.liveness }}
        livenessProbe:
          {{ $config.healthchecks.liveness | toJson | indent 10 }}
        {{- end }}
        {{- if and $config.healthchecks $config.healthchecks.readiness }}
        readinessProbe:
          {{ $config.healthchecks.readiness | toJson | indent 10 }}
        {{- end }}
        {{- if $config.volumes }}
        volumeMounts:
        {{- range $vol := $config.volumes }}
        - name: {{ $vol.name }}
          mountPath: {{ $vol.mountPath }}
          {{- if $vol.subPath }}
          subPath: {{ $vol.subPath }}
          {{- end }}
          {{- if $vol.readOnly }}
          readOnly: {{ $vol.readOnly }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- if $.Values.global.image.working_dir }}
        workingDir: {{ $.Values.global.image.working_dir }}
        {{- end }}
      {{- if $.Values.global.image.image_pull_secrets }}
      imagePullSecrets:
      - name: {{ $.Values.global.image.image_pull_secrets }}
      {{- end }}
      serviceAccountName: {{ $.Values.global.app_name }}
      {{- if $has_chown }}
      initContainers:
        - name: fix-permissions
          image: busybox
          command:
            - "sh"
            - "-c"
            - >
              {{- range $vol := $config.volumes }}
              {{- if $vol.chown }}
              if [ -d "{{ $vol.mountPath }}" ]; then
                echo "Setting ownership for {{ $vol.mountPath }}";
                chown -R {{ $vol.chown }} {{ $vol.mountPath }};
              else
                echo "Warning: Directory {{ $vol.mountPath }} not found, skipping chown";
              fi;
              {{- end }}
              {{- end }}
          volumeMounts:
            {{- range $vol := $config.volumes }}
            {{- if $vol.chown }}
            - mountPath: {{ $vol.mountPath }}
              name: {{ $vol.name }}
            {{- end }}
            {{- end }}
      {{- end }}
      {{- if $config.volumes }}
      volumes:
      {{- range $vol := $config.volumes }}
      - name: {{ $vol.name }}
        {{- if eq $vol.type "persistentVolumeClaim" }}
        persistentVolumeClaim:
          claimName: {{ $vol.claimName }}
        {{- else if eq $vol.type "configMap" }}
        configMap:
          name: {{ $vol.configMapName }}
        {{- else if eq $vol.type "secret" }}
        secret:
          secretName: {{ $vol.secretName }}
        {{- else if eq $vol.type "emptyDir" }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- end }}

